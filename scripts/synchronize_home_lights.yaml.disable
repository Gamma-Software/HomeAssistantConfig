---
# This is my Sunlight script. It uses the custom Ciradian Lighting integration.
#
# The Circadian Lighting integration is very nice, but fails to handle lights
# correctly when they turn off or are handled by groups. After I got sick of it
# I wrote this little script.
#
# This script allows one to apply the "Sun" to any light, at any moment. It
# checks if the target lights support color, color temperature or just
# brightness and applies the correct values that belong to the light.
#
# This script is a one-shot. It does not keep the light updated, which was my
# goal. Home Assistant has automations, I can just call it more often.
#
# It offers 2 transition settings: `transition` that is used for regular
# transitions and the `turn_on_transition` which is used then the light is
# turned on.
#
# By default it will not turn on a light, `turn_on` has to be set to true to
# do that. This allows this script to be called without turning on a light that
# is currently set to off.
#
# Used integration: https://github.com/claytonjn/hass-circadian_lighting
#
# Example: Set sunlight, without turning it on
#
# - service: script.turn_on
#   entity_id: script.sunlight
#   data:
#    entities: [light.living_room, light.kitchen]
#
# Example: Set sunlight, turning it on when off, custom turn on transition
#
# - service: script.turn_on
#   entity_id: script.synchronize_home_lights
#   data:
#    entities: [light.living_room]
#    turn_on: true
#    turn_on_transition: 10
#
alias: "synchronize home lights"
description: Synchronize the given switched on lights when the attributs changes
mode: parallel
max: 10

fields:
  brightness:
    description: Brightness in %, Take this attribut as a trigger to synchronize
  color_temp:
    description: Color Temp, Take this attribut as a trigger to synchronize

variables:
  brightness: "{{ brightness | default(100.0)}}"
  color_temp: "{{ color_temp | default(400.0)}}"
  entities_on: "{{ states['light'] | selectattr('state','eq', 'on') | map(attribute='entity_id') | list }}"

sequence:
  - service: light.turn_on
    data: 
      entity_id: "{{ entities_on }}"
      brightness: "{{ brightness }}"
      color_temp: "{{ color_temp }}"